/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import com.docspring.*;
import com.docspring.auth.*;
import com.docspring.AddFieldsData;
import com.docspring.BatchGeneratePdfs201Response;
import java.math.BigDecimal;
import com.docspring.CombinePdfsData;
import com.docspring.CombinedSubmission;
import com.docspring.CombinedSubmissionData;
import com.docspring.CopyTemplateOptions;
import com.docspring.CreateCombinedSubmissionResponse;
import com.docspring.CreateCustomFileData;
import com.docspring.CreateCustomFileResponse;
import com.docspring.CreateFolderData;
import com.docspring.CreateHtmlSubmissionData;
import com.docspring.CreateHtmlTemplate;
import com.docspring.CreatePdfSubmissionData;
import com.docspring.CreatePdfTemplate;
import com.docspring.CreateSubmissionDataRequestEventRequest;
import com.docspring.CreateSubmissionDataRequestEventResponse;
import com.docspring.CreateSubmissionDataRequestResponse;
import com.docspring.CreateSubmissionDataRequestTokenResponse;
import com.docspring.CreateSubmissionResponse;
import com.docspring.ErrorResponse;
import java.io.File;
import com.docspring.Folder;
import com.docspring.JsonSchema;
import com.docspring.ListSubmissionsResponse;
import com.docspring.MoveFolderData;
import com.docspring.MoveTemplateData;
import com.docspring.MultipleErrorsResponse;
import com.docspring.PublishVersionData;
import com.docspring.RenameFolderData;
import com.docspring.RestoreVersionData;
import com.docspring.Submission;
import com.docspring.SubmissionBatchData;
import com.docspring.SubmissionBatchWithSubmissions;
import com.docspring.SubmissionDataRequestShow;
import com.docspring.SubmissionPreview;
import com.docspring.SuccessErrorResponse;
import com.docspring.SuccessMultipleErrorsResponse;
import com.docspring.Template;
import com.docspring.TemplateAddFieldsResponse;
import com.docspring.TemplateDeleteResponse;
import com.docspring.TemplatePreview;
import com.docspring.TemplatePublishVersionResponse;
import com.docspring.UpdateHtmlTemplate;
import com.docspring.UpdateSubmissionDataRequestData;
import com.docspring.UploadPresignResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PdfApi
 */
public class PdfApiTest {

    private final PdfApi api = new PdfApi();

    /**
     * Add new fields to a Template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFieldsToTemplateTest() throws ApiException {
        //String templateId = null;
        //AddFieldsData data = null;
        //TemplateAddFieldsResponse response = api.addFieldsToTemplate(templateId, data);
        // TODO: test validations
    }

    /**
     * Generates multiple PDFs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGeneratePdfsTest() throws ApiException {
        //SubmissionBatchData data = null;
        //Boolean wait = null;
        //BatchGeneratePdfs201Response response = api.batchGeneratePdfs(data, wait);
        // TODO: test validations
    }

    /**
     * Merge submission PDFs, template PDFs, or custom files
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void combinePdfsTest() throws ApiException {
        //CombinePdfsData data = null;
        //CreateCombinedSubmissionResponse response = api.combinePdfs(data);
        // TODO: test validations
    }

    /**
     * Merge generated PDFs together
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void combineSubmissionsTest() throws ApiException {
        //CombinedSubmissionData data = null;
        //Boolean wait = null;
        //CreateCombinedSubmissionResponse response = api.combineSubmissions(data, wait);
        // TODO: test validations
    }

    /**
     * Copy a Template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyTemplateTest() throws ApiException {
        //String templateId = null;
        //CopyTemplateOptions options = null;
        //TemplatePreview response = api.copyTemplate(templateId, options);
        // TODO: test validations
    }

    /**
     * Create a new custom file from a cached presign upload
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomFileFromUploadTest() throws ApiException {
        //CreateCustomFileData data = null;
        //CreateCustomFileResponse response = api.createCustomFileFromUpload(data);
        // TODO: test validations
    }

    /**
     * Creates a new event for emailing a signee a request for signature
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataRequestEventTest() throws ApiException {
        //String dataRequestId = null;
        //CreateSubmissionDataRequestEventRequest event = null;
        //CreateSubmissionDataRequestEventResponse response = api.createDataRequestEvent(dataRequestId, event);
        // TODO: test validations
    }

    /**
     * Creates a new data request token for form authentication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataRequestTokenTest() throws ApiException {
        //String dataRequestId = null;
        //String type = null;
        //CreateSubmissionDataRequestTokenResponse response = api.createDataRequestToken(dataRequestId, type);
        // TODO: test validations
    }

    /**
     * Create a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException {
        //CreateFolderData data = null;
        //Folder response = api.createFolder(data);
        // TODO: test validations
    }

    /**
     * Create a new HTML template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHTMLTemplateTest() throws ApiException {
        //CreateHtmlTemplate data = null;
        //TemplatePreview response = api.createHTMLTemplate(data);
        // TODO: test validations
    }

    /**
     * Create a new PDF template with a form POST file upload
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPDFTemplateTest() throws ApiException {
        //File templateDocument = null;
        //String templateName = null;
        //Boolean wait = null;
        //String templateDescription = null;
        //String templateParentFolderId = null;
        //TemplatePreview response = api.createPDFTemplate(templateDocument, templateName, wait, templateDescription, templateParentFolderId);
        // TODO: test validations
    }

    /**
     * Create a new PDF template from a cached presign upload
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPDFTemplateFromUploadTest() throws ApiException {
        //CreatePdfTemplate data = null;
        //TemplatePreview response = api.createPDFTemplateFromUpload(data);
        // TODO: test validations
    }

    /**
     * Delete a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        //String folderId = null;
        //Folder response = api.deleteFolder(folderId);
        // TODO: test validations
    }

    /**
     * Delete a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        //String templateId = null;
        //String version = null;
        //TemplateDeleteResponse response = api.deleteTemplate(templateId, version);
        // TODO: test validations
    }

    /**
     * Expire a combined submission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expireCombinedSubmissionTest() throws ApiException {
        //String combinedSubmissionId = null;
        //CombinedSubmission response = api.expireCombinedSubmission(combinedSubmissionId);
        // TODO: test validations
    }

    /**
     * Expire a PDF submission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expireSubmissionTest() throws ApiException {
        //String submissionId = null;
        //SubmissionPreview response = api.expireSubmission(submissionId);
        // TODO: test validations
    }

    /**
     * Generates a new PDF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePdfTest() throws ApiException {
        //String templateId = null;
        //CreatePdfSubmissionData submission = null;
        //Boolean wait = null;
        //CreateSubmissionResponse response = api.generatePdf(templateId, submission, wait);
        // TODO: test validations
    }

    /**
     * Generates a new PDF for an HTML template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePdfForHtmlTemplateTest() throws ApiException {
        //String templateId = null;
        //CreateHtmlSubmissionData submission = null;
        //Boolean wait = null;
        //CreateSubmissionResponse response = api.generatePdfForHtmlTemplate(templateId, submission, wait);
        // TODO: test validations
    }

    /**
     * Generated a preview PDF for partially completed data requests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePreviewTest() throws ApiException {
        //String submissionId = null;
        //SuccessErrorResponse response = api.generatePreview(submissionId);
        // TODO: test validations
    }

    /**
     * Check the status of a combined submission (merged PDFs)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCombinedSubmissionTest() throws ApiException {
        //String combinedSubmissionId = null;
        //CombinedSubmission response = api.getCombinedSubmission(combinedSubmissionId);
        // TODO: test validations
    }

    /**
     * Look up a submission data request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataRequestTest() throws ApiException {
        //String dataRequestId = null;
        //SubmissionDataRequestShow response = api.getDataRequest(dataRequestId);
        // TODO: test validations
    }

    /**
     * Fetch the full attributes for a PDF template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFullTemplateTest() throws ApiException {
        //String templateId = null;
        //Template response = api.getFullTemplate(templateId);
        // TODO: test validations
    }

    /**
     * Get a presigned URL so that you can upload a file to our AWS S3 bucket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPresignUrlTest() throws ApiException {
        //UploadPresignResponse response = api.getPresignUrl();
        // TODO: test validations
    }

    /**
     * Check the status of a PDF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubmissionTest() throws ApiException {
        //String submissionId = null;
        //Boolean includeData = null;
        //Submission response = api.getSubmission(submissionId, includeData);
        // TODO: test validations
    }

    /**
     * Check the status of a submission batch job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubmissionBatchTest() throws ApiException {
        //String submissionBatchId = null;
        //Boolean includeSubmissions = null;
        //SubmissionBatchWithSubmissions response = api.getSubmissionBatch(submissionBatchId, includeSubmissions);
        // TODO: test validations
    }

    /**
     * Check the status of an uploaded template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateTest() throws ApiException {
        //String templateId = null;
        //TemplatePreview response = api.getTemplate(templateId);
        // TODO: test validations
    }

    /**
     * Fetch the JSON schema for a template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateSchemaTest() throws ApiException {
        //String templateId = null;
        //JsonSchema response = api.getTemplateSchema(templateId);
        // TODO: test validations
    }

    /**
     * Get a list of all combined submissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCombinedSubmissionsTest() throws ApiException {
        //Integer page = null;
        //Integer perPage = null;
        //List<CombinedSubmission> response = api.listCombinedSubmissions(page, perPage);
        // TODO: test validations
    }

    /**
     * Get a list of all folders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFoldersTest() throws ApiException {
        //String parentFolderId = null;
        //List<Folder> response = api.listFolders(parentFolderId);
        // TODO: test validations
    }

    /**
     * List all submissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSubmissionsTest() throws ApiException {
        //String cursor = null;
        //BigDecimal limit = null;
        //String createdAfter = null;
        //String createdBefore = null;
        //String type = null;
        //Boolean includeData = null;
        //ListSubmissionsResponse response = api.listSubmissions(cursor, limit, createdAfter, createdBefore, type, includeData);
        // TODO: test validations
    }

    /**
     * List all submissions for a given template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTemplateSubmissionsTest() throws ApiException {
        //String templateId = null;
        //String cursor = null;
        //BigDecimal limit = null;
        //String createdAfter = null;
        //String createdBefore = null;
        //String type = null;
        //Boolean includeData = null;
        //ListSubmissionsResponse response = api.listTemplateSubmissions(templateId, cursor, limit, createdAfter, createdBefore, type, includeData);
        // TODO: test validations
    }

    /**
     * Get a list of all templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTemplatesTest() throws ApiException {
        //String query = null;
        //String parentFolderId = null;
        //Integer page = null;
        //Integer perPage = null;
        //List<TemplatePreview> response = api.listTemplates(query, parentFolderId, page, perPage);
        // TODO: test validations
    }

    /**
     * Move a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveFolderToFolderTest() throws ApiException {
        //String folderId = null;
        //MoveFolderData data = null;
        //Folder response = api.moveFolderToFolder(folderId, data);
        // TODO: test validations
    }

    /**
     * Move Template to folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveTemplateToFolderTest() throws ApiException {
        //String templateId = null;
        //MoveTemplateData data = null;
        //TemplatePreview response = api.moveTemplateToFolder(templateId, data);
        // TODO: test validations
    }

    /**
     * Publish a template version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishTemplateVersionTest() throws ApiException {
        //String templateId = null;
        //PublishVersionData data = null;
        //TemplatePublishVersionResponse response = api.publishTemplateVersion(templateId, data);
        // TODO: test validations
    }

    /**
     * Rename a folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameFolderTest() throws ApiException {
        //String folderId = null;
        //RenameFolderData data = null;
        //Folder response = api.renameFolder(folderId, data);
        // TODO: test validations
    }

    /**
     * Restore a template version
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreTemplateVersionTest() throws ApiException {
        //String templateId = null;
        //RestoreVersionData data = null;
        //SuccessErrorResponse response = api.restoreTemplateVersion(templateId, data);
        // TODO: test validations
    }

    /**
     * Test Authentication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testAuthenticationTest() throws ApiException {
        //SuccessErrorResponse response = api.testAuthentication();
        // TODO: test validations
    }

    /**
     * Update a submission data request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataRequestTest() throws ApiException {
        //String dataRequestId = null;
        //UpdateSubmissionDataRequestData data = null;
        //CreateSubmissionDataRequestResponse response = api.updateDataRequest(dataRequestId, data);
        // TODO: test validations
    }

    /**
     * Update a Template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTemplateTest() throws ApiException {
        //String templateId = null;
        //UpdateHtmlTemplate data = null;
        //SuccessMultipleErrorsResponse response = api.updateTemplate(templateId, data);
        // TODO: test validations
    }

}
