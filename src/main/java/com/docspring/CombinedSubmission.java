/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.docspring.CombinedSubmissionAction;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.docspring.JSON;


/**
 * CombinedSubmission
 */
@JsonPropertyOrder({
  CombinedSubmission.JSON_PROPERTY_ID,
  CombinedSubmission.JSON_PROPERTY_STATE,
  CombinedSubmission.JSON_PROPERTY_EXPIRED,
  CombinedSubmission.JSON_PROPERTY_EXPIRES_IN,
  CombinedSubmission.JSON_PROPERTY_EXPIRES_AT,
  CombinedSubmission.JSON_PROPERTY_PROCESSED_AT,
  CombinedSubmission.JSON_PROPERTY_ERROR_MESSAGE,
  CombinedSubmission.JSON_PROPERTY_SUBMISSION_IDS,
  CombinedSubmission.JSON_PROPERTY_SOURCE_PDFS,
  CombinedSubmission.JSON_PROPERTY_METADATA,
  CombinedSubmission.JSON_PROPERTY_PASSWORD,
  CombinedSubmission.JSON_PROPERTY_PDF_HASH,
  CombinedSubmission.JSON_PROPERTY_DOWNLOAD_URL,
  CombinedSubmission.JSON_PROPERTY_ACTIONS
})
@JsonTypeName("combined_submission")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class CombinedSubmission {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  /**
   * Gets or Sets state
   */
  public enum StateEnum {
    PENDING(String.valueOf("pending")),
    
    PROCESSED(String.valueOf("processed")),
    
    ERROR(String.valueOf("error"));

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull
  private StateEnum state;

  public static final String JSON_PROPERTY_EXPIRED = "expired";
  @javax.annotation.Nonnull
  private Boolean expired;

  public static final String JSON_PROPERTY_EXPIRES_IN = "expires_in";
  @javax.annotation.Nullable
  private Integer expiresIn;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expires_at";
  @javax.annotation.Nullable
  private String expiresAt;

  public static final String JSON_PROPERTY_PROCESSED_AT = "processed_at";
  @javax.annotation.Nullable
  private String processedAt;

  public static final String JSON_PROPERTY_ERROR_MESSAGE = "error_message";
  @javax.annotation.Nullable
  private String errorMessage;

  public static final String JSON_PROPERTY_SUBMISSION_IDS = "submission_ids";
  @javax.annotation.Nonnull
  private List<String> submissionIds = new ArrayList<>();

  public static final String JSON_PROPERTY_SOURCE_PDFS = "source_pdfs";
  @javax.annotation.Nonnull
  private List<Object> sourcePdfs = new ArrayList<>();

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nonnull
  private Object metadata;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  @javax.annotation.Nullable
  private String password;

  public static final String JSON_PROPERTY_PDF_HASH = "pdf_hash";
  @javax.annotation.Nullable
  private String pdfHash;

  public static final String JSON_PROPERTY_DOWNLOAD_URL = "download_url";
  @javax.annotation.Nullable
  private String downloadUrl;

  public static final String JSON_PROPERTY_ACTIONS = "actions";
  @javax.annotation.Nonnull
  private List<CombinedSubmissionAction> actions = new ArrayList<>();

  public CombinedSubmission() { 
  }

  public CombinedSubmission id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public CombinedSubmission state(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
  }


  public CombinedSubmission expired(@javax.annotation.Nonnull Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getExpired() {
    return expired;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpired(@javax.annotation.Nonnull Boolean expired) {
    this.expired = expired;
  }


  public CombinedSubmission expiresIn(@javax.annotation.Nullable Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExpiresIn() {
    return expiresIn;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresIn(@javax.annotation.Nullable Integer expiresIn) {
    this.expiresIn = expiresIn;
  }


  public CombinedSubmission expiresAt(@javax.annotation.Nullable String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(@javax.annotation.Nullable String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CombinedSubmission processedAt(@javax.annotation.Nullable String processedAt) {
    this.processedAt = processedAt;
    return this;
  }

  /**
   * Get processedAt
   * @return processedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessedAt() {
    return processedAt;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProcessedAt(@javax.annotation.Nullable String processedAt) {
    this.processedAt = processedAt;
  }


  public CombinedSubmission errorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getErrorMessage() {
    return errorMessage;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setErrorMessage(@javax.annotation.Nullable String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public CombinedSubmission submissionIds(@javax.annotation.Nonnull List<String> submissionIds) {
    this.submissionIds = submissionIds;
    return this;
  }

  public CombinedSubmission addSubmissionIdsItem(String submissionIdsItem) {
    if (this.submissionIds == null) {
      this.submissionIds = new ArrayList<>();
    }
    this.submissionIds.add(submissionIdsItem);
    return this;
  }

  /**
   * Get submissionIds
   * @return submissionIds
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUBMISSION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getSubmissionIds() {
    return submissionIds;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSION_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubmissionIds(@javax.annotation.Nonnull List<String> submissionIds) {
    this.submissionIds = submissionIds;
  }


  public CombinedSubmission sourcePdfs(@javax.annotation.Nonnull List<Object> sourcePdfs) {
    this.sourcePdfs = sourcePdfs;
    return this;
  }

  public CombinedSubmission addSourcePdfsItem(Object sourcePdfsItem) {
    if (this.sourcePdfs == null) {
      this.sourcePdfs = new ArrayList<>();
    }
    this.sourcePdfs.add(sourcePdfsItem);
    return this;
  }

  /**
   * Get sourcePdfs
   * @return sourcePdfs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOURCE_PDFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getSourcePdfs() {
    return sourcePdfs;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_PDFS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSourcePdfs(@javax.annotation.Nonnull List<Object> sourcePdfs) {
    this.sourcePdfs = sourcePdfs;
  }


  public CombinedSubmission metadata(@javax.annotation.Nonnull Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(@javax.annotation.Nonnull Object metadata) {
    this.metadata = metadata;
  }


  public CombinedSubmission password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public CombinedSubmission pdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
    return this;
  }

  /**
   * Get pdfHash
   * @return pdfHash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PDF_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPdfHash() {
    return pdfHash;
  }


  @JsonProperty(JSON_PROPERTY_PDF_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
  }


  public CombinedSubmission downloadUrl(@javax.annotation.Nullable String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * Get downloadUrl
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDownloadUrl() {
    return downloadUrl;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDownloadUrl(@javax.annotation.Nullable String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public CombinedSubmission actions(@javax.annotation.Nonnull List<CombinedSubmissionAction> actions) {
    this.actions = actions;
    return this;
  }

  public CombinedSubmission addActionsItem(CombinedSubmissionAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CombinedSubmissionAction> getActions() {
    return actions;
  }


  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActions(@javax.annotation.Nonnull List<CombinedSubmissionAction> actions) {
    this.actions = actions;
  }


  /**
   * Return true if this combined_submission object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinedSubmission combinedSubmission = (CombinedSubmission) o;
    return Objects.equals(this.id, combinedSubmission.id) &&
        Objects.equals(this.state, combinedSubmission.state) &&
        Objects.equals(this.expired, combinedSubmission.expired) &&
        Objects.equals(this.expiresIn, combinedSubmission.expiresIn) &&
        Objects.equals(this.expiresAt, combinedSubmission.expiresAt) &&
        Objects.equals(this.processedAt, combinedSubmission.processedAt) &&
        Objects.equals(this.errorMessage, combinedSubmission.errorMessage) &&
        Objects.equals(this.submissionIds, combinedSubmission.submissionIds) &&
        Objects.equals(this.sourcePdfs, combinedSubmission.sourcePdfs) &&
        Objects.equals(this.metadata, combinedSubmission.metadata) &&
        Objects.equals(this.password, combinedSubmission.password) &&
        Objects.equals(this.pdfHash, combinedSubmission.pdfHash) &&
        Objects.equals(this.downloadUrl, combinedSubmission.downloadUrl) &&
        Objects.equals(this.actions, combinedSubmission.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, state, expired, expiresIn, expiresAt, processedAt, errorMessage, submissionIds, sourcePdfs, metadata, password, pdfHash, downloadUrl, actions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CombinedSubmission {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    processedAt: ").append(toIndentedString(processedAt)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    submissionIds: ").append(toIndentedString(submissionIds)).append("\n");
    sb.append("    sourcePdfs: ").append(toIndentedString(sourcePdfs)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pdfHash: ").append(toIndentedString(pdfHash)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

