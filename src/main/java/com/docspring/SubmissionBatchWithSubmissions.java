/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.docspring.SubmissionPreview;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.docspring.JSON;


/**
 * SubmissionBatchWithSubmissions
 */
@JsonPropertyOrder({
  SubmissionBatchWithSubmissions.JSON_PROPERTY_ID,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_STATE,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_METADATA,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_PROCESSED_AT,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_TOTAL_COUNT,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_PENDING_COUNT,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_ERROR_COUNT,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_COMPLETION_PERCENTAGE,
  SubmissionBatchWithSubmissions.JSON_PROPERTY_SUBMISSIONS
})
@JsonTypeName("submission_batch_with_submissions")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class SubmissionBatchWithSubmissions {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  /**
   * Gets or Sets state
   */
  public enum StateEnum {
    PENDING(String.valueOf("pending")),
    
    PROCESSED(String.valueOf("processed")),
    
    ERROR(String.valueOf("error"));

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull
  private StateEnum state;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nonnull
  private Object metadata;

  public static final String JSON_PROPERTY_PROCESSED_AT = "processed_at";
  @javax.annotation.Nullable
  private String processedAt;

  public static final String JSON_PROPERTY_TOTAL_COUNT = "total_count";
  @javax.annotation.Nonnull
  private Integer totalCount;

  public static final String JSON_PROPERTY_PENDING_COUNT = "pending_count";
  @javax.annotation.Nonnull
  private Integer pendingCount;

  public static final String JSON_PROPERTY_ERROR_COUNT = "error_count";
  @javax.annotation.Nonnull
  private Integer errorCount;

  public static final String JSON_PROPERTY_COMPLETION_PERCENTAGE = "completion_percentage";
  @javax.annotation.Nonnull
  private BigDecimal completionPercentage;

  public static final String JSON_PROPERTY_SUBMISSIONS = "submissions";
  @javax.annotation.Nullable
  private List<SubmissionPreview> submissions = new ArrayList<>();

  public SubmissionBatchWithSubmissions() { 
  }

  public SubmissionBatchWithSubmissions id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public SubmissionBatchWithSubmissions state(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
  }


  public SubmissionBatchWithSubmissions metadata(@javax.annotation.Nonnull Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(@javax.annotation.Nonnull Object metadata) {
    this.metadata = metadata;
  }


  public SubmissionBatchWithSubmissions processedAt(@javax.annotation.Nullable String processedAt) {
    this.processedAt = processedAt;
    return this;
  }

  /**
   * Get processedAt
   * @return processedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessedAt() {
    return processedAt;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProcessedAt(@javax.annotation.Nullable String processedAt) {
    this.processedAt = processedAt;
  }


  public SubmissionBatchWithSubmissions totalCount(@javax.annotation.Nonnull Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Get totalCount
   * @return totalCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalCount() {
    return totalCount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalCount(@javax.annotation.Nonnull Integer totalCount) {
    this.totalCount = totalCount;
  }


  public SubmissionBatchWithSubmissions pendingCount(@javax.annotation.Nonnull Integer pendingCount) {
    this.pendingCount = pendingCount;
    return this;
  }

  /**
   * Get pendingCount
   * @return pendingCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PENDING_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPendingCount() {
    return pendingCount;
  }


  @JsonProperty(JSON_PROPERTY_PENDING_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPendingCount(@javax.annotation.Nonnull Integer pendingCount) {
    this.pendingCount = pendingCount;
  }


  public SubmissionBatchWithSubmissions errorCount(@javax.annotation.Nonnull Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * Get errorCount
   * @return errorCount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ERROR_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getErrorCount() {
    return errorCount;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setErrorCount(@javax.annotation.Nonnull Integer errorCount) {
    this.errorCount = errorCount;
  }


  public SubmissionBatchWithSubmissions completionPercentage(@javax.annotation.Nonnull BigDecimal completionPercentage) {
    this.completionPercentage = completionPercentage;
    return this;
  }

  /**
   * Get completionPercentage
   * @return completionPercentage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMPLETION_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getCompletionPercentage() {
    return completionPercentage;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETION_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompletionPercentage(@javax.annotation.Nonnull BigDecimal completionPercentage) {
    this.completionPercentage = completionPercentage;
  }


  public SubmissionBatchWithSubmissions submissions(@javax.annotation.Nullable List<SubmissionPreview> submissions) {
    this.submissions = submissions;
    return this;
  }

  public SubmissionBatchWithSubmissions addSubmissionsItem(SubmissionPreview submissionsItem) {
    if (this.submissions == null) {
      this.submissions = new ArrayList<>();
    }
    this.submissions.add(submissionsItem);
    return this;
  }

  /**
   * Get submissions
   * @return submissions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SubmissionPreview> getSubmissions() {
    return submissions;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmissions(@javax.annotation.Nullable List<SubmissionPreview> submissions) {
    this.submissions = submissions;
  }


  /**
   * Return true if this submission_batch_with_submissions object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionBatchWithSubmissions submissionBatchWithSubmissions = (SubmissionBatchWithSubmissions) o;
    return Objects.equals(this.id, submissionBatchWithSubmissions.id) &&
        Objects.equals(this.state, submissionBatchWithSubmissions.state) &&
        Objects.equals(this.metadata, submissionBatchWithSubmissions.metadata) &&
        Objects.equals(this.processedAt, submissionBatchWithSubmissions.processedAt) &&
        Objects.equals(this.totalCount, submissionBatchWithSubmissions.totalCount) &&
        Objects.equals(this.pendingCount, submissionBatchWithSubmissions.pendingCount) &&
        Objects.equals(this.errorCount, submissionBatchWithSubmissions.errorCount) &&
        Objects.equals(this.completionPercentage, submissionBatchWithSubmissions.completionPercentage) &&
        Objects.equals(this.submissions, submissionBatchWithSubmissions.submissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, state, metadata, processedAt, totalCount, pendingCount, errorCount, completionPercentage, submissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionBatchWithSubmissions {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    processedAt: ").append(toIndentedString(processedAt)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    pendingCount: ").append(toIndentedString(pendingCount)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    completionPercentage: ").append(toIndentedString(completionPercentage)).append("\n");
    sb.append("    submissions: ").append(toIndentedString(submissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

