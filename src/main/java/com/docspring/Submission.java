/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.docspring.SubmissionAction;
import com.docspring.SubmissionDataRequest;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.docspring.JSON;


/**
 * Submission
 */
@JsonPropertyOrder({
  Submission.JSON_PROPERTY_BATCH_ID,
  Submission.JSON_PROPERTY_DATA_REQUESTS,
  Submission.JSON_PROPERTY_EDITABLE,
  Submission.JSON_PROPERTY_EXPIRED,
  Submission.JSON_PROPERTY_EXPIRES_AT,
  Submission.JSON_PROPERTY_ID,
  Submission.JSON_PROPERTY_JSON_SCHEMA_ERRORS,
  Submission.JSON_PROPERTY_METADATA,
  Submission.JSON_PROPERTY_PASSWORD,
  Submission.JSON_PROPERTY_PROCESSED_AT,
  Submission.JSON_PROPERTY_STATE,
  Submission.JSON_PROPERTY_TEMPLATE_ID,
  Submission.JSON_PROPERTY_TEMPLATE_TYPE,
  Submission.JSON_PROPERTY_TEMPLATE_VERSION,
  Submission.JSON_PROPERTY_TEST,
  Submission.JSON_PROPERTY_TRUNCATED_TEXT,
  Submission.JSON_PROPERTY_PDF_HASH,
  Submission.JSON_PROPERTY_DOWNLOAD_URL,
  Submission.JSON_PROPERTY_PERMANENT_DOWNLOAD_URL,
  Submission.JSON_PROPERTY_PREVIEW_DOWNLOAD_URL,
  Submission.JSON_PROPERTY_PREVIEW_GENERATED_AT,
  Submission.JSON_PROPERTY_AUDIT_TRAIL_DOWNLOAD_URL,
  Submission.JSON_PROPERTY_ACTIONS,
  Submission.JSON_PROPERTY_SOURCE,
  Submission.JSON_PROPERTY_REFERRER,
  Submission.JSON_PROPERTY_DATA
})
@JsonTypeName("submission")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class Submission {
  public static final String JSON_PROPERTY_BATCH_ID = "batch_id";
  @javax.annotation.Nullable
  private String batchId;

  public static final String JSON_PROPERTY_DATA_REQUESTS = "data_requests";
  @javax.annotation.Nonnull
  private List<SubmissionDataRequest> dataRequests = new ArrayList<>();

  public static final String JSON_PROPERTY_EDITABLE = "editable";
  @javax.annotation.Nullable
  private Boolean editable;

  public static final String JSON_PROPERTY_EXPIRED = "expired";
  @javax.annotation.Nonnull
  private Boolean expired;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expires_at";
  @javax.annotation.Nullable
  private String expiresAt;

  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_JSON_SCHEMA_ERRORS = "json_schema_errors";
  @javax.annotation.Nullable
  private List<String> jsonSchemaErrors;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nonnull
  private Object metadata;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  @javax.annotation.Nullable
  private String password;

  public static final String JSON_PROPERTY_PROCESSED_AT = "processed_at";
  @javax.annotation.Nullable
  private String processedAt;

  /**
   * Gets or Sets state
   */
  public enum StateEnum {
    PENDING(String.valueOf("pending")),
    
    PROCESSED(String.valueOf("processed")),
    
    INVALID_DATA(String.valueOf("invalid_data")),
    
    ERROR(String.valueOf("error")),
    
    IMAGE_DOWNLOAD_FAILED(String.valueOf("image_download_failed")),
    
    IMAGE_PROCESSING_FAILED(String.valueOf("image_processing_failed")),
    
    WAITING_FOR_DATA_REQUESTS(String.valueOf("waiting_for_data_requests")),
    
    SYNTAX_ERROR(String.valueOf("syntax_error")),
    
    ACCOUNT_SUSPENDED(String.valueOf("account_suspended")),
    
    LICENSE_REVOKED(String.valueOf("license_revoked")),
    
    ACCIDENTAL(String.valueOf("accidental"));

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull
  private StateEnum state;

  public static final String JSON_PROPERTY_TEMPLATE_ID = "template_id";
  @javax.annotation.Nullable
  private String templateId;

  /**
   * Gets or Sets templateType
   */
  public enum TemplateTypeEnum {
    PDF(String.valueOf("pdf")),
    
    HTML(String.valueOf("html"));

    private String value;

    TemplateTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TemplateTypeEnum fromValue(String value) {
      for (TemplateTypeEnum b : TemplateTypeEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TEMPLATE_TYPE = "template_type";
  @javax.annotation.Nonnull
  private TemplateTypeEnum templateType;

  public static final String JSON_PROPERTY_TEMPLATE_VERSION = "template_version";
  @javax.annotation.Nullable
  private String templateVersion;

  public static final String JSON_PROPERTY_TEST = "test";
  @javax.annotation.Nonnull
  private Boolean test;

  public static final String JSON_PROPERTY_TRUNCATED_TEXT = "truncated_text";
  @javax.annotation.Nullable
  private Object truncatedText;

  public static final String JSON_PROPERTY_PDF_HASH = "pdf_hash";
  @javax.annotation.Nullable
  private String pdfHash;

  public static final String JSON_PROPERTY_DOWNLOAD_URL = "download_url";
  @javax.annotation.Nullable
  private String downloadUrl;

  public static final String JSON_PROPERTY_PERMANENT_DOWNLOAD_URL = "permanent_download_url";
  @javax.annotation.Nullable
  private String permanentDownloadUrl;

  public static final String JSON_PROPERTY_PREVIEW_DOWNLOAD_URL = "preview_download_url";
  @javax.annotation.Nullable
  private String previewDownloadUrl;

  public static final String JSON_PROPERTY_PREVIEW_GENERATED_AT = "preview_generated_at";
  @javax.annotation.Nullable
  private String previewGeneratedAt;

  public static final String JSON_PROPERTY_AUDIT_TRAIL_DOWNLOAD_URL = "audit_trail_download_url";
  @javax.annotation.Nullable
  private String auditTrailDownloadUrl;

  public static final String JSON_PROPERTY_ACTIONS = "actions";
  @javax.annotation.Nonnull
  private List<SubmissionAction> actions = new ArrayList<>();

  /**
   * Gets or Sets source
   */
  public enum SourceEnum {
    API(String.valueOf("api")),
    
    WEB(String.valueOf("web")),
    
    REPROCESS(String.valueOf("reprocess")),
    
    WEBHOOK(String.valueOf("webhook"));

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE = "source";
  @javax.annotation.Nonnull
  private SourceEnum source;

  public static final String JSON_PROPERTY_REFERRER = "referrer";
  @javax.annotation.Nullable
  private String referrer;

  public static final String JSON_PROPERTY_DATA = "data";
  @javax.annotation.Nullable
  private Object data;

  public Submission() { 
  }

  public Submission batchId(@javax.annotation.Nullable String batchId) {
    this.batchId = batchId;
    return this;
  }

  /**
   * Get batchId
   * @return batchId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BATCH_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBatchId() {
    return batchId;
  }


  @JsonProperty(JSON_PROPERTY_BATCH_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBatchId(@javax.annotation.Nullable String batchId) {
    this.batchId = batchId;
  }


  public Submission dataRequests(@javax.annotation.Nonnull List<SubmissionDataRequest> dataRequests) {
    this.dataRequests = dataRequests;
    return this;
  }

  public Submission addDataRequestsItem(SubmissionDataRequest dataRequestsItem) {
    if (this.dataRequests == null) {
      this.dataRequests = new ArrayList<>();
    }
    this.dataRequests.add(dataRequestsItem);
    return this;
  }

  /**
   * Get dataRequests
   * @return dataRequests
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SubmissionDataRequest> getDataRequests() {
    return dataRequests;
  }


  @JsonProperty(JSON_PROPERTY_DATA_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataRequests(@javax.annotation.Nonnull List<SubmissionDataRequest> dataRequests) {
    this.dataRequests = dataRequests;
  }


  public Submission editable(@javax.annotation.Nullable Boolean editable) {
    this.editable = editable;
    return this;
  }

  /**
   * Get editable
   * @return editable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EDITABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEditable() {
    return editable;
  }


  @JsonProperty(JSON_PROPERTY_EDITABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEditable(@javax.annotation.Nullable Boolean editable) {
    this.editable = editable;
  }


  public Submission expired(@javax.annotation.Nonnull Boolean expired) {
    this.expired = expired;
    return this;
  }

  /**
   * Get expired
   * @return expired
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getExpired() {
    return expired;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpired(@javax.annotation.Nonnull Boolean expired) {
    this.expired = expired;
  }


  public Submission expiresAt(@javax.annotation.Nullable String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Get expiresAt
   * @return expiresAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiresAt(@javax.annotation.Nullable String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public Submission id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public Submission jsonSchemaErrors(@javax.annotation.Nullable List<String> jsonSchemaErrors) {
    this.jsonSchemaErrors = jsonSchemaErrors;
    return this;
  }

  public Submission addJsonSchemaErrorsItem(String jsonSchemaErrorsItem) {
    if (this.jsonSchemaErrors == null) {
      this.jsonSchemaErrors = new ArrayList<>();
    }
    this.jsonSchemaErrors.add(jsonSchemaErrorsItem);
    return this;
  }

  /**
   * Get jsonSchemaErrors
   * @return jsonSchemaErrors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JSON_SCHEMA_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getJsonSchemaErrors() {
    return jsonSchemaErrors;
  }


  @JsonProperty(JSON_PROPERTY_JSON_SCHEMA_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setJsonSchemaErrors(@javax.annotation.Nullable List<String> jsonSchemaErrors) {
    this.jsonSchemaErrors = jsonSchemaErrors;
  }


  public Submission metadata(@javax.annotation.Nonnull Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetadata(@javax.annotation.Nonnull Object metadata) {
    this.metadata = metadata;
  }


  public Submission password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public Submission processedAt(@javax.annotation.Nullable String processedAt) {
    this.processedAt = processedAt;
    return this;
  }

  /**
   * Get processedAt
   * @return processedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getProcessedAt() {
    return processedAt;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProcessedAt(@javax.annotation.Nullable String processedAt) {
    this.processedAt = processedAt;
  }


  public Submission state(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
  }


  public Submission templateId(@javax.annotation.Nullable String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTemplateId() {
    return templateId;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplateId(@javax.annotation.Nullable String templateId) {
    this.templateId = templateId;
  }


  public Submission templateType(@javax.annotation.Nonnull TemplateTypeEnum templateType) {
    this.templateType = templateType;
    return this;
  }

  /**
   * Get templateType
   * @return templateType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEMPLATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TemplateTypeEnum getTemplateType() {
    return templateType;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplateType(@javax.annotation.Nonnull TemplateTypeEnum templateType) {
    this.templateType = templateType;
  }


  public Submission templateVersion(@javax.annotation.Nullable String templateVersion) {
    this.templateVersion = templateVersion;
    return this;
  }

  /**
   * Get templateVersion
   * @return templateVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTemplateVersion() {
    return templateVersion;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplateVersion(@javax.annotation.Nullable String templateVersion) {
    this.templateVersion = templateVersion;
  }


  public Submission test(@javax.annotation.Nonnull Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTest() {
    return test;
  }


  @JsonProperty(JSON_PROPERTY_TEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTest(@javax.annotation.Nonnull Boolean test) {
    this.test = test;
  }


  public Submission truncatedText(@javax.annotation.Nullable Object truncatedText) {
    this.truncatedText = truncatedText;
    return this;
  }

  /**
   * Get truncatedText
   * @return truncatedText
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUNCATED_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getTruncatedText() {
    return truncatedText;
  }


  @JsonProperty(JSON_PROPERTY_TRUNCATED_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTruncatedText(@javax.annotation.Nullable Object truncatedText) {
    this.truncatedText = truncatedText;
  }


  public Submission pdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
    return this;
  }

  /**
   * Get pdfHash
   * @return pdfHash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PDF_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPdfHash() {
    return pdfHash;
  }


  @JsonProperty(JSON_PROPERTY_PDF_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPdfHash(@javax.annotation.Nullable String pdfHash) {
    this.pdfHash = pdfHash;
  }


  public Submission downloadUrl(@javax.annotation.Nullable String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * Get downloadUrl
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDownloadUrl() {
    return downloadUrl;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDownloadUrl(@javax.annotation.Nullable String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public Submission permanentDownloadUrl(@javax.annotation.Nullable String permanentDownloadUrl) {
    this.permanentDownloadUrl = permanentDownloadUrl;
    return this;
  }

  /**
   * Get permanentDownloadUrl
   * @return permanentDownloadUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERMANENT_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPermanentDownloadUrl() {
    return permanentDownloadUrl;
  }


  @JsonProperty(JSON_PROPERTY_PERMANENT_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPermanentDownloadUrl(@javax.annotation.Nullable String permanentDownloadUrl) {
    this.permanentDownloadUrl = permanentDownloadUrl;
  }


  public Submission previewDownloadUrl(@javax.annotation.Nullable String previewDownloadUrl) {
    this.previewDownloadUrl = previewDownloadUrl;
    return this;
  }

  /**
   * Get previewDownloadUrl
   * @return previewDownloadUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPreviewDownloadUrl() {
    return previewDownloadUrl;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreviewDownloadUrl(@javax.annotation.Nullable String previewDownloadUrl) {
    this.previewDownloadUrl = previewDownloadUrl;
  }


  public Submission previewGeneratedAt(@javax.annotation.Nullable String previewGeneratedAt) {
    this.previewGeneratedAt = previewGeneratedAt;
    return this;
  }

  /**
   * Get previewGeneratedAt
   * @return previewGeneratedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW_GENERATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPreviewGeneratedAt() {
    return previewGeneratedAt;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_GENERATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreviewGeneratedAt(@javax.annotation.Nullable String previewGeneratedAt) {
    this.previewGeneratedAt = previewGeneratedAt;
  }


  public Submission auditTrailDownloadUrl(@javax.annotation.Nullable String auditTrailDownloadUrl) {
    this.auditTrailDownloadUrl = auditTrailDownloadUrl;
    return this;
  }

  /**
   * Get auditTrailDownloadUrl
   * @return auditTrailDownloadUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUDIT_TRAIL_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAuditTrailDownloadUrl() {
    return auditTrailDownloadUrl;
  }


  @JsonProperty(JSON_PROPERTY_AUDIT_TRAIL_DOWNLOAD_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuditTrailDownloadUrl(@javax.annotation.Nullable String auditTrailDownloadUrl) {
    this.auditTrailDownloadUrl = auditTrailDownloadUrl;
  }


  public Submission actions(@javax.annotation.Nonnull List<SubmissionAction> actions) {
    this.actions = actions;
    return this;
  }

  public Submission addActionsItem(SubmissionAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SubmissionAction> getActions() {
    return actions;
  }


  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActions(@javax.annotation.Nonnull List<SubmissionAction> actions) {
    this.actions = actions;
  }


  public Submission source(@javax.annotation.Nonnull SourceEnum source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SourceEnum getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSource(@javax.annotation.Nonnull SourceEnum source) {
    this.source = source;
  }


  public Submission referrer(@javax.annotation.Nullable String referrer) {
    this.referrer = referrer;
    return this;
  }

  /**
   * Get referrer
   * @return referrer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERRER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReferrer() {
    return referrer;
  }


  @JsonProperty(JSON_PROPERTY_REFERRER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReferrer(@javax.annotation.Nullable String referrer) {
    this.referrer = referrer;
  }


  public Submission data(@javax.annotation.Nullable Object data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setData(@javax.annotation.Nullable Object data) {
    this.data = data;
  }


  /**
   * Return true if this submission object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Submission submission = (Submission) o;
    return Objects.equals(this.batchId, submission.batchId) &&
        Objects.equals(this.dataRequests, submission.dataRequests) &&
        Objects.equals(this.editable, submission.editable) &&
        Objects.equals(this.expired, submission.expired) &&
        Objects.equals(this.expiresAt, submission.expiresAt) &&
        Objects.equals(this.id, submission.id) &&
        Objects.equals(this.jsonSchemaErrors, submission.jsonSchemaErrors) &&
        Objects.equals(this.metadata, submission.metadata) &&
        Objects.equals(this.password, submission.password) &&
        Objects.equals(this.processedAt, submission.processedAt) &&
        Objects.equals(this.state, submission.state) &&
        Objects.equals(this.templateId, submission.templateId) &&
        Objects.equals(this.templateType, submission.templateType) &&
        Objects.equals(this.templateVersion, submission.templateVersion) &&
        Objects.equals(this.test, submission.test) &&
        Objects.equals(this.truncatedText, submission.truncatedText) &&
        Objects.equals(this.pdfHash, submission.pdfHash) &&
        Objects.equals(this.downloadUrl, submission.downloadUrl) &&
        Objects.equals(this.permanentDownloadUrl, submission.permanentDownloadUrl) &&
        Objects.equals(this.previewDownloadUrl, submission.previewDownloadUrl) &&
        Objects.equals(this.previewGeneratedAt, submission.previewGeneratedAt) &&
        Objects.equals(this.auditTrailDownloadUrl, submission.auditTrailDownloadUrl) &&
        Objects.equals(this.actions, submission.actions) &&
        Objects.equals(this.source, submission.source) &&
        Objects.equals(this.referrer, submission.referrer) &&
        Objects.equals(this.data, submission.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchId, dataRequests, editable, expired, expiresAt, id, jsonSchemaErrors, metadata, password, processedAt, state, templateId, templateType, templateVersion, test, truncatedText, pdfHash, downloadUrl, permanentDownloadUrl, previewDownloadUrl, previewGeneratedAt, auditTrailDownloadUrl, actions, source, referrer, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Submission {\n");
    sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
    sb.append("    dataRequests: ").append(toIndentedString(dataRequests)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jsonSchemaErrors: ").append(toIndentedString(jsonSchemaErrors)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    processedAt: ").append(toIndentedString(processedAt)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    templateVersion: ").append(toIndentedString(templateVersion)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    truncatedText: ").append(toIndentedString(truncatedText)).append("\n");
    sb.append("    pdfHash: ").append(toIndentedString(pdfHash)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    permanentDownloadUrl: ").append(toIndentedString(permanentDownloadUrl)).append("\n");
    sb.append("    previewDownloadUrl: ").append(toIndentedString(previewDownloadUrl)).append("\n");
    sb.append("    previewGeneratedAt: ").append(toIndentedString(previewGeneratedAt)).append("\n");
    sb.append("    auditTrailDownloadUrl: ").append(toIndentedString(auditTrailDownloadUrl)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

