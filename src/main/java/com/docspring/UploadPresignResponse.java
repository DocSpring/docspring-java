/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.docspring.JSON;


/**
 * UploadPresignResponse
 */
@JsonPropertyOrder({
  UploadPresignResponse.JSON_PROPERTY_FIELDS,
  UploadPresignResponse.JSON_PROPERTY_HEADERS,
  UploadPresignResponse.JSON_PROPERTY_URL,
  UploadPresignResponse.JSON_PROPERTY_METHOD
})
@JsonTypeName("upload_presign_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class UploadPresignResponse {
  public static final String JSON_PROPERTY_FIELDS = "fields";
  @javax.annotation.Nonnull
  private Object fields;

  public static final String JSON_PROPERTY_HEADERS = "headers";
  @javax.annotation.Nonnull
  private Object headers;

  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nonnull
  private String url;

  /**
   * Gets or Sets method
   */
  public enum MethodEnum {
    POST(String.valueOf("post"));

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  @javax.annotation.Nullable
  private MethodEnum method;

  public UploadPresignResponse() { 
  }

  public UploadPresignResponse fields(@javax.annotation.Nonnull Object fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getFields() {
    return fields;
  }


  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFields(@javax.annotation.Nonnull Object fields) {
    this.fields = fields;
  }


  public UploadPresignResponse headers(@javax.annotation.Nonnull Object headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getHeaders() {
    return headers;
  }


  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeaders(@javax.annotation.Nonnull Object headers) {
    this.headers = headers;
  }


  public UploadPresignResponse url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public UploadPresignResponse method(@javax.annotation.Nullable MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MethodEnum getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethod(@javax.annotation.Nullable MethodEnum method) {
    this.method = method;
  }


  /**
   * Return true if this upload_presign_response object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadPresignResponse uploadPresignResponse = (UploadPresignResponse) o;
    return Objects.equals(this.fields, uploadPresignResponse.fields) &&
        Objects.equals(this.headers, uploadPresignResponse.headers) &&
        Objects.equals(this.url, uploadPresignResponse.url) &&
        Objects.equals(this.method, uploadPresignResponse.method);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, headers, url, method);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadPresignResponse {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

