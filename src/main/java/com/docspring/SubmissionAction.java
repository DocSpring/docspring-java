/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.docspring.JSON;


/**
 * SubmissionAction
 */
@JsonPropertyOrder({
  SubmissionAction.JSON_PROPERTY_ID,
  SubmissionAction.JSON_PROPERTY_INTEGRATION_ID,
  SubmissionAction.JSON_PROPERTY_STATE,
  SubmissionAction.JSON_PROPERTY_ACTION_TYPE,
  SubmissionAction.JSON_PROPERTY_ACTION_CATEGORY,
  SubmissionAction.JSON_PROPERTY_RESULT_DATA
})
@JsonTypeName("submission_action")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class SubmissionAction {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_INTEGRATION_ID = "integration_id";
  @javax.annotation.Nullable
  private String integrationId;

  /**
   * Gets or Sets state
   */
  public enum StateEnum {
    PENDING(String.valueOf("pending")),
    
    PROCESSED(String.valueOf("processed")),
    
    FAILED(String.valueOf("failed")),
    
    ERROR(String.valueOf("error"));

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nonnull
  private StateEnum state;

  /**
   * Gets or Sets actionType
   */
  public enum ActionTypeEnum {
    WEBHOOK(String.valueOf("webhook")),
    
    SLACK_WEBHOOK(String.valueOf("slack_webhook")),
    
    EMAIL(String.valueOf("email")),
    
    AWS_S3_UPLOAD(String.valueOf("aws_s3_upload"));

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTION_TYPE = "action_type";
  @javax.annotation.Nonnull
  private ActionTypeEnum actionType;

  /**
   * Gets or Sets actionCategory
   */
  public enum ActionCategoryEnum {
    NOTIFICATION(String.valueOf("notification")),
    
    FILE_UPLOAD(String.valueOf("file_upload"));

    private String value;

    ActionCategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActionCategoryEnum fromValue(String value) {
      for (ActionCategoryEnum b : ActionCategoryEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTION_CATEGORY = "action_category";
  @javax.annotation.Nonnull
  private ActionCategoryEnum actionCategory;

  public static final String JSON_PROPERTY_RESULT_DATA = "result_data";
  @javax.annotation.Nonnull
  private Object resultData;

  public SubmissionAction() { 
  }

  public SubmissionAction id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public SubmissionAction integrationId(@javax.annotation.Nullable String integrationId) {
    this.integrationId = integrationId;
    return this;
  }

  /**
   * Get integrationId
   * @return integrationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTEGRATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIntegrationId() {
    return integrationId;
  }


  @JsonProperty(JSON_PROPERTY_INTEGRATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIntegrationId(@javax.annotation.Nullable String integrationId) {
    this.integrationId = integrationId;
  }


  public SubmissionAction state(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(@javax.annotation.Nonnull StateEnum state) {
    this.state = state;
  }


  public SubmissionAction actionType(@javax.annotation.Nonnull ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Get actionType
   * @return actionType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ActionTypeEnum getActionType() {
    return actionType;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActionType(@javax.annotation.Nonnull ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public SubmissionAction actionCategory(@javax.annotation.Nonnull ActionCategoryEnum actionCategory) {
    this.actionCategory = actionCategory;
    return this;
  }

  /**
   * Get actionCategory
   * @return actionCategory
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ActionCategoryEnum getActionCategory() {
    return actionCategory;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActionCategory(@javax.annotation.Nonnull ActionCategoryEnum actionCategory) {
    this.actionCategory = actionCategory;
  }


  public SubmissionAction resultData(@javax.annotation.Nonnull Object resultData) {
    this.resultData = resultData;
    return this;
  }

  /**
   * Get resultData
   * @return resultData
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getResultData() {
    return resultData;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultData(@javax.annotation.Nonnull Object resultData) {
    this.resultData = resultData;
  }


  /**
   * Return true if this submission_action object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionAction submissionAction = (SubmissionAction) o;
    return Objects.equals(this.id, submissionAction.id) &&
        Objects.equals(this.integrationId, submissionAction.integrationId) &&
        Objects.equals(this.state, submissionAction.state) &&
        Objects.equals(this.actionType, submissionAction.actionType) &&
        Objects.equals(this.actionCategory, submissionAction.actionCategory) &&
        Objects.equals(this.resultData, submissionAction.resultData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, integrationId, state, actionType, actionCategory, resultData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionAction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    actionCategory: ").append(toIndentedString(actionCategory)).append("\n");
    sb.append("    resultData: ").append(toIndentedString(resultData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

