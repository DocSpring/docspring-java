/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.docspring.JSON;


/**
 * SubmissionDataRequestEvent
 */
@JsonPropertyOrder({
  SubmissionDataRequestEvent.JSON_PROPERTY_ID,
  SubmissionDataRequestEvent.JSON_PROPERTY_SUBMISSION_ID,
  SubmissionDataRequestEvent.JSON_PROPERTY_SUBMISSION_DATA_REQUEST_ID,
  SubmissionDataRequestEvent.JSON_PROPERTY_EVENT_TYPE,
  SubmissionDataRequestEvent.JSON_PROPERTY_MESSAGE_TYPE,
  SubmissionDataRequestEvent.JSON_PROPERTY_MESSAGE_RECIPIENT,
  SubmissionDataRequestEvent.JSON_PROPERTY_OCCURRED_AT
})
@JsonTypeName("submission_data_request_event")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class SubmissionDataRequestEvent {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_SUBMISSION_ID = "submission_id";
  @javax.annotation.Nullable
  private String submissionId;

  public static final String JSON_PROPERTY_SUBMISSION_DATA_REQUEST_ID = "submission_data_request_id";
  @javax.annotation.Nullable
  private String submissionDataRequestId;

  /**
   * Gets or Sets eventType
   */
  public enum EventTypeEnum {
    SEND_REQUEST(String.valueOf("send_request")),
    
    VIEW_REQUEST(String.valueOf("view_request")),
    
    ACCEPTED_TERMS(String.valueOf("accepted_terms")),
    
    DECLINE_REQUEST(String.valueOf("decline_request")),
    
    SIGN_REQUEST(String.valueOf("sign_request")),
    
    ALL_COMPLETED(String.valueOf("all_completed"));

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_TYPE = "event_type";
  @javax.annotation.Nonnull
  private EventTypeEnum eventType;

  /**
   * Gets or Sets messageType
   */
  public enum MessageTypeEnum {
    EMAIL(String.valueOf("email")),
    
    SMS(String.valueOf("sms")),
    
    FAX(String.valueOf("fax")),
    
    MAIL(String.valueOf("mail")),
    
    SLACK(String.valueOf("slack")),
    
    MSTEAMS(String.valueOf("msteams")),
    
    DISCORD(String.valueOf("discord")),
    
    TELEGRAM(String.valueOf("telegram")),
    
    WHATSAPP(String.valueOf("whatsapp"));

    private String value;

    MessageTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MessageTypeEnum fromValue(String value) {
      for (MessageTypeEnum b : MessageTypeEnum.values()) {
        if (b.value.equalsIgnoreCase(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_MESSAGE_TYPE = "message_type";
  @javax.annotation.Nullable
  private MessageTypeEnum messageType;

  public static final String JSON_PROPERTY_MESSAGE_RECIPIENT = "message_recipient";
  @javax.annotation.Nullable
  private String messageRecipient;

  public static final String JSON_PROPERTY_OCCURRED_AT = "occurred_at";
  @javax.annotation.Nullable
  private String occurredAt;

  public SubmissionDataRequestEvent() { 
  }

  public SubmissionDataRequestEvent id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public SubmissionDataRequestEvent submissionId(@javax.annotation.Nullable String submissionId) {
    this.submissionId = submissionId;
    return this;
  }

  /**
   * Get submissionId
   * @return submissionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMISSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubmissionId() {
    return submissionId;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubmissionId(@javax.annotation.Nullable String submissionId) {
    this.submissionId = submissionId;
  }


  public SubmissionDataRequestEvent submissionDataRequestId(@javax.annotation.Nullable String submissionDataRequestId) {
    this.submissionDataRequestId = submissionDataRequestId;
    return this;
  }

  /**
   * Get submissionDataRequestId
   * @return submissionDataRequestId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMISSION_DATA_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubmissionDataRequestId() {
    return submissionDataRequestId;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSION_DATA_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubmissionDataRequestId(@javax.annotation.Nullable String submissionDataRequestId) {
    this.submissionDataRequestId = submissionDataRequestId;
  }


  public SubmissionDataRequestEvent eventType(@javax.annotation.Nonnull EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EventTypeEnum getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventType(@javax.annotation.Nonnull EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public SubmissionDataRequestEvent messageType(@javax.annotation.Nullable MessageTypeEnum messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * Get messageType
   * @return messageType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MessageTypeEnum getMessageType() {
    return messageType;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessageType(@javax.annotation.Nullable MessageTypeEnum messageType) {
    this.messageType = messageType;
  }


  public SubmissionDataRequestEvent messageRecipient(@javax.annotation.Nullable String messageRecipient) {
    this.messageRecipient = messageRecipient;
    return this;
  }

  /**
   * Get messageRecipient
   * @return messageRecipient
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessageRecipient() {
    return messageRecipient;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessageRecipient(@javax.annotation.Nullable String messageRecipient) {
    this.messageRecipient = messageRecipient;
  }


  public SubmissionDataRequestEvent occurredAt(@javax.annotation.Nullable String occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * Get occurredAt
   * @return occurredAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OCCURRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOccurredAt() {
    return occurredAt;
  }


  @JsonProperty(JSON_PROPERTY_OCCURRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOccurredAt(@javax.annotation.Nullable String occurredAt) {
    this.occurredAt = occurredAt;
  }


  /**
   * Return true if this submission_data_request_event object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionDataRequestEvent submissionDataRequestEvent = (SubmissionDataRequestEvent) o;
    return Objects.equals(this.id, submissionDataRequestEvent.id) &&
        Objects.equals(this.submissionId, submissionDataRequestEvent.submissionId) &&
        Objects.equals(this.submissionDataRequestId, submissionDataRequestEvent.submissionDataRequestId) &&
        Objects.equals(this.eventType, submissionDataRequestEvent.eventType) &&
        Objects.equals(this.messageType, submissionDataRequestEvent.messageType) &&
        Objects.equals(this.messageRecipient, submissionDataRequestEvent.messageRecipient) &&
        Objects.equals(this.occurredAt, submissionDataRequestEvent.occurredAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, submissionId, submissionDataRequestId, eventType, messageType, messageRecipient, occurredAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionDataRequestEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    submissionId: ").append(toIndentedString(submissionId)).append("\n");
    sb.append("    submissionDataRequestId: ").append(toIndentedString(submissionDataRequestId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    messageRecipient: ").append(toIndentedString(messageRecipient)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

