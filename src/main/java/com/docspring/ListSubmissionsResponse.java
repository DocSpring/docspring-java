/*
 * DocSpring API
 * DocSpring provides an API that helps you fill out and sign PDF templates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.docspring;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.docspring.Submission;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.docspring.JSON;


/**
 * ListSubmissionsResponse
 */
@JsonPropertyOrder({
  ListSubmissionsResponse.JSON_PROPERTY_SUBMISSIONS,
  ListSubmissionsResponse.JSON_PROPERTY_LIMIT,
  ListSubmissionsResponse.JSON_PROPERTY_NEXT_CURSOR
})
@JsonTypeName("list_submissions_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class ListSubmissionsResponse {
  public static final String JSON_PROPERTY_SUBMISSIONS = "submissions";
  @javax.annotation.Nonnull
  private List<Submission> submissions = new ArrayList<>();

  public static final String JSON_PROPERTY_LIMIT = "limit";
  @javax.annotation.Nonnull
  private BigDecimal limit;

  public static final String JSON_PROPERTY_NEXT_CURSOR = "next_cursor";
  @javax.annotation.Nullable
  private String nextCursor;

  public ListSubmissionsResponse() { 
  }

  public ListSubmissionsResponse submissions(@javax.annotation.Nonnull List<Submission> submissions) {
    this.submissions = submissions;
    return this;
  }

  public ListSubmissionsResponse addSubmissionsItem(Submission submissionsItem) {
    if (this.submissions == null) {
      this.submissions = new ArrayList<>();
    }
    this.submissions.add(submissionsItem);
    return this;
  }

  /**
   * Get submissions
   * @return submissions
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Submission> getSubmissions() {
    return submissions;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubmissions(@javax.annotation.Nonnull List<Submission> submissions) {
    this.submissions = submissions;
  }


  public ListSubmissionsResponse limit(@javax.annotation.Nonnull BigDecimal limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * @return limit
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimit(@javax.annotation.Nonnull BigDecimal limit) {
    this.limit = limit;
  }


  public ListSubmissionsResponse nextCursor(@javax.annotation.Nullable String nextCursor) {
    this.nextCursor = nextCursor;
    return this;
  }

  /**
   * Get nextCursor
   * @return nextCursor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEXT_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNextCursor() {
    return nextCursor;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_CURSOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNextCursor(@javax.annotation.Nullable String nextCursor) {
    this.nextCursor = nextCursor;
  }


  /**
   * Return true if this list_submissions_response object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListSubmissionsResponse listSubmissionsResponse = (ListSubmissionsResponse) o;
    return Objects.equals(this.submissions, listSubmissionsResponse.submissions) &&
        Objects.equals(this.limit, listSubmissionsResponse.limit) &&
        Objects.equals(this.nextCursor, listSubmissionsResponse.nextCursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(submissions, limit, nextCursor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListSubmissionsResponse {\n");
    sb.append("    submissions: ").append(toIndentedString(submissions)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    nextCursor: ").append(toIndentedString(nextCursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

